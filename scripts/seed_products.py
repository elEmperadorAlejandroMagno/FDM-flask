#!/usr/bin/env python3
import os
import sys
import json
import uuid
from cs50 import SQL
from dotenv import load_dotenv

"""
Seed products and their images into the database.

Usage:
  python3 scripts/seed_products.py utils/products_seed.json

JSON schema (array of products):
[
  {
    "id": "",                # optional; autogenerated if empty
    "name": "Salsa Chipotle",
    "price": 250,
    "stock": 100,
    "description": "...",
    "category": "salsa",     # one of: salsa, merch, otros
    "talla": null,            # for merch (optional)
    "color": null,            # for merch (optional)
    "spicy_level": "medio",  # for salsas (optional)
    "images": ["chipotle_1.jpg", "chipotle_2.jpg"]  # filenames under static/images/products/
  }
]
"""

STATIC_PRODUCTS_DIR = os.path.join('static', 'images', 'productos')


def ensure_image_exists(filename: str) -> str:
    """Return the public path for the image and warn if file missing on disk."""
    disk_path = os.path.join(STATIC_PRODUCTS_DIR, filename)
    if not os.path.isfile(disk_path):
        print(f"[WARN] Image file not found: {disk_path}")
    public_path = f"/static/images/productos/{filename}"
    return public_path


def upsert_product(db: SQL, product: dict):
    pid = product.get('id') or str(uuid.uuid4())
    name = product['name']
    price = float(product['price'])
    stock = int(product.get('stock') or 0)
    description = product.get('description')
    category = product.get('category')
    talla = product.get('talla')
    color = product.get('color')
    spicy_level = product.get('spicy_level')

    # Does product exist?
    rows = db.execute("SELECT id FROM products WHERE id = ?", pid)
    if rows:
        # Update existing
        db.execute(
            """
            UPDATE products
               SET name = ?, price = ?, stock = ?, description = ?, category = ?, talla = ?, color = ?, spicy_level = ?
             WHERE id = ?
            """,
            name, price, stock, description, category, talla, color, spicy_level, pid
        )
        # Clear old images
        db.execute("DELETE FROM product_images WHERE product_id = ?", pid)
    else:
        # Insert new
        db.execute(
            """
            INSERT INTO products (id, name, price, stock, description, category, talla, color, spicy_level)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            """,
            pid, name, price, stock, description, category, talla, color, spicy_level
        )

    # Insert images
    for img_name in (product.get('images') or []):
        image_id = str(uuid.uuid4())
        image_path = ensure_image_exists(img_name)
        db.execute(
            """
            INSERT INTO product_images (id, product_id, image) VALUES (?, ?, ?)
            """,
            image_id, pid, image_path
        )

    return pid


def main():
    if len(sys.argv) < 2:
        print("Usage: python3 scripts/seed_products.py <path_to_products_json>")
        sys.exit(1)
    
    if sys.argv[1] == '--delete':
        print("Deleting all products and images...")
        db_url = os.getenv('DATA_BASE')
        if not db_url:
            print("DATA_BASE environment variable is not set in .env")
            sys.exit(1)
        
        db = SQL(db_url)
        db.execute("DELETE FROM product_images")
        db.execute("DELETE FROM products")
        print("All products and images deleted.")
        return

    json_path = sys.argv[1]
    if not os.path.isfile(json_path):
        print(f"JSON file not found: {json_path}")
        sys.exit(1)

    load_dotenv()
    db_url = os.getenv('DATA_BASE')
    if not db_url:
        print("DATA_BASE environment variable is not set in .env")
        sys.exit(1)

    db = SQL(db_url)

    with open(json_path, 'r', encoding='utf-8') as f:
        products = json.load(f)

    count = 0
    for p in products:
        upsert_product(db, p)
        count += 1

    print(f"Seed completed. Upserted {count} product(s).")


if __name__ == '__main__':
    main()

